name: Deploy React App to S3 & CloudFront

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  infrastructure:
    name: Set up AWS Infrastructure with Terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Initialize Terraform
        run: terraform init

      - name: Apply Terraform Configuration
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Extract Terraform Outputs
        id: tf_outputs
        run: |
          echo "S3_BUCKET_NAME=$(terraform output -raw s3_bucket_name)" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
          echo "::add-mask::$(terraform output -raw iam_access_key)"
          echo "::add-mask::$(terraform output -raw iam_secret_key)"

      - name: Save AWS Access Keys to GitHub Secrets
        run: |
          gh secret set AWS_ACCESS_KEY_ID --body "$(terraform output -raw iam_access_key)"
          gh secret set AWS_SECRET_ACCESS_KEY --body "$(terraform output -raw iam_secret_key)"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy React App to S3
    runs-on: ubuntu-latest
    needs: infrastructure

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build React App
        run: npm run build

      - name: Deploy to S3
        run: aws s3 sync build/ s3://$S3_BUCKET_NAME --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1  # Change to your AWS region

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
